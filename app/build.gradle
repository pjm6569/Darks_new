plugins {
    alias(libs.plugins.android.application)
}

// properties 변수를 정의하고, local.properties 파일에서 내용을 로드합니다.
// 이렇게 로드된 객체는 Map처럼 사용될 수 있습니다.
def keyProps = new Properties()
def localPropertiesFile = rootProject.file("local.properties")

if (localPropertiesFile.exists()) {
    // 파일이 존재할 경우에만 로드
    localPropertiesFile.withInputStream { keyProps.load(it) }
} else {
    // local.properties가 없을 경우 빌드 실패를 방지
    println("WARNING: local.properties file not found.")
}


android {


    signingConfigs {
        release {
            // **오류 수정**: 'getProperty()' 대신 Map 접근 방식인 대괄호 '[' ']'를 사용합니다.
            // 변수 이름도 'keyProps'로 변경했습니다.
            storeFile file(keyProps['RELEASE_STORE_FILE'] ?: '')
            storePassword keyProps['RELEASE_STORE_PASSWORD'] ?: ''
            keyAlias keyProps['RELEASE_KEY_ALIAS'] ?: ''
            keyPassword keyProps['RELEASE_KEY_PASSWORD'] ?: ''
        }
    }
    namespace 'com.jmpark.app.darks'
    compileSdk 34

    defaultConfig {
        // ...
        applicationId "com.yourcompany.darks" // 본인의 패키지 이름
        minSdk 30
        targetSdk 34
        versionCode 1
        versionName "1.0.2" // <-- GitHub 릴리스와 비교할 버전
        // ...
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    applicationVariants.all{
        variant ->
            variant.outputs.each{
                    // on below line we are setting a name to our apk
                output->
                    // 앱의 이름을 지정해줍니다.
                    def appName = "Darks"
                    // 파일생성 날짜를 이용하기 위한 처리.
                    def newName = appName+'_'+defaultConfig.versionName+'.apk'
                    output.outputFileName  = newName
            }
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // RecyclerView (리스트 표시)
    implementation 'androidx.recyclerview:recyclerview:1.3.2'

    // CardView (아이템 UI)
    implementation 'androidx.cardview:cardview:1.0.0'

    // ViewModel (UI 데이터 관리)
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.8.3'
    implementation 'androidx.lifecycle:lifecycle-livedata:2.8.3'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.8.3'

    // Room (로컬 데이터베이스)
    implementation 'androidx.room:room-runtime:2.6.1'
    annotationProcessor 'androidx.room:room-compiler:2.6.1'

    // Volley (GitHub API 통신용)
    implementation 'com.android.volley:volley:1.2.1'
}
